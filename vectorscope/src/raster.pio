;
; Write data out to parallel DACs with careful timing in order to support
; a raster display.
;
; Takes 16-bit words in the following format
;
; +----------------------------------------------+
; + 31 MSB                                     0 +
; +---------------+------------------------------+
; + Hold (4-bits) +        X (12-bits)           +
; +-------------- +------------------------------+
;
; But if X == 0, then the following 16-bit word
; is used to set the Y DAC;
;

; Timings (for setting the X-DAC with a hold)...
;
; If Hold == 0
;     8 Cycles
; else
;     6 + (6 * Hold) Cycles
;
; Hold == 0 : 8
; Hold == 1 : 12
; Hold == 2 : 18
; etc.
; Hold == 15 : 96

;
; - Oli Wright 2022
;

.program raster
.side_set 2 ; Latch triggers for X-DAC and Y-DAC

start:
    // Shift out the 12 x bits
    out x, 12           side 3  [0]
    jmp !x set_y        side 3  [0]

.wrap_target
    // Put the X-DAC value on the pins and keep the X-DAC CS
    // high for at least 4 cycles for the value to settle.
    mov pins, x         side 3  [1]
    // Shift out the 4-bits for the hold delay
    out x, 4            side 3  [0]

    jmp x-- hold        side 3  [0] // Jump to the hold loop if we're holding

    // From now on, we pull the X-DAC CS pin low, latching
    // in the new X coordinate.
    // Hold it low for at least 4 cycles

    // Don't incur an additional delay for hold 0, beyond
    // that required to hold CS low for 4 cycles
    jmp next_x          side 2  [1]

    // Delay loop for holds > 0
    // This delay is linear.
    // It would be better if we could make it non-linear somehow.
hold:
    jmp x-- hold        side 2  [5]

next_x:
    // Shift out the next 12 x bits
    // while keeping the X-DAC CS pin low
    out x, 12           side 2  [0]
    jmp !x set_y        side 2  [0]
.wrap

set_y:
    // Drain the 4 unused bits in the 16-bit command
    out x, 4            side 3  [0]
    // Read the y coord 
    out pins, 12        side 3  [3] // Delay to settle
    // Drain the 4 unused bits in the 16-bit command
    out x, 4            side 1  [2]
    jmp start           side 1  [0]



